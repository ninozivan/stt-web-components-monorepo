/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SttButton {
        "color": 'dark' | 'gray' | 'light' | 'red' | 'green' | 'blue' | 'orange';
        "corners": 'all' | 'left' | 'right' | 'top' | 'bottom';
        "shape": 'default' | 'block' | 'square' | 'circle';
        "size": 'extra-small' | 'small' | 'medium' | 'large' | 'extra-large';
    }
    interface SttTextarea {
        /**
          * If `true`, the element height will increase based on the value.
         */
        "autoGrow": boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        "corners": 'all' | 'left' | 'right' | 'top' | 'bottom';
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce": number;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
    }
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSttButtonElement extends Components.SttButton, HTMLStencilElement {
    }
    var HTMLSttButtonElement: {
        prototype: HTMLSttButtonElement;
        new (): HTMLSttButtonElement;
    };
    interface HTMLSttTextareaElement extends Components.SttTextarea, HTMLStencilElement {
    }
    var HTMLSttTextareaElement: {
        prototype: HTMLSttTextareaElement;
        new (): HTMLSttTextareaElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "stt-button": HTMLSttButtonElement;
        "stt-textarea": HTMLSttTextareaElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SttButton {
        "color"?: 'dark' | 'gray' | 'light' | 'red' | 'green' | 'blue' | 'orange';
        "corners"?: 'all' | 'left' | 'right' | 'top' | 'bottom';
        "shape"?: 'default' | 'block' | 'square' | 'circle';
        "size"?: 'extra-small' | 'small' | 'medium' | 'large' | 'extra-large';
    }
    interface SttTextarea {
        /**
          * If `true`, the element height will increase based on the value.
         */
        "autoGrow"?: boolean;
        /**
          * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
         */
        "cols"?: number;
        "corners"?: 'all' | 'left' | 'right' | 'top' | 'bottom';
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
         */
        "debounce"?: number;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onValueChanged"?: (event: CustomEvent<any>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * The number of visible text lines for the control.
         */
        "rows"?: number;
        /**
          * The value of the textarea.
         */
        "value"?: string | null;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "stt-button": SttButton;
        "stt-textarea": SttTextarea;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "stt-button": LocalJSX.SttButton & JSXBase.HTMLAttributes<HTMLSttButtonElement>;
            "stt-textarea": LocalJSX.SttTextarea & JSXBase.HTMLAttributes<HTMLSttTextareaElement>;
        }
    }
}
